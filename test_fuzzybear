#!/usr/bin/python3

'''
:::::::::::: Driver For Tests ::::::::::::

    ► Exposes components of the fuzzer down
      to a class level to simplify testing
      of trivial operations without hooking
      up the component to the rest of the
      architecture 

'''

import csv
from pathlib import Path
import sys
from colorama import Fore, Style

from fuzzybear import Harness
import argparse
from pathlib import Path

## CSV TESTS ##
from fuzzybear.strategies import CSV

## ELF Test ##
from fuzzybear.strategies import ELF

## JPEG Test ##
from fuzzybear.strategies import JPEG

## JSON Test ##
from fuzzybear.strategies import JSON 

## PDF Test ##
from fuzzybear.strategies import PDF

## TXT Test ##
from fuzzybear.strategies import TXT

## XML Test ##
from fuzzybear.strategies import XML

## ADD TEST IMPORT ## ^



def print_banner():
    print(Fore.RED + '''

          ____    _____ _____ ____ _____   _____ _   _ ____________   __   
          \ \ \  |_   _| ____/ ___|_   _| |  ___| | | |__  /__  /\ \ / /   
           \ \ \   | | |  _| \___ \ | |   | |_  | | | | / /  / /  \ V /   
           / / /   | | | |___ ___) || |   |  _| | |_| |/ /_ / /_   | |     
          /_/_/    |_| |_____|____/ |_|   |_|    \___//____/____|  |_|     
                                                                      
          ____  _____    _    ____        
         | __ )| ____|  / \  |  _ \      
         |  _ \|  _|   / _ \ | |_) |          
         | |_) | |___ / ___ \|  _ <             
         |____/|_____/_/   \_\_| \_\          
                           
    ''')
    print(Style.RESET_ALL)


########################## :: [DEFINE TESTS] :: ##########################


def test_harness():

    TEST_DIR = './tests/components/harness/'

    print(f'''
        [>>] Running tests from {TEST_DIR}
    ''')

    for file in Path(f'{TEST_DIR}/ins').glob('*'):
        input = "".join(open(file).readlines())
        for binary in Path(f'{TEST_DIR}/bins').glob('*'):
            print(f'''
                ► Trying {file.name} against {binary.name}
            ''')

            harness = Harness.Harness(binary)
            res = harness.open_pipe(input)

            print(f'''
                    [+] Response from {binary.name} was {res}
            ''')

# test csv1
def test_csv():
    TEST_DIR = './tests/complete'
    TEST_BINARY = f'{TEST_DIR}/csv1'
    TEST_SAMPLE = f'{TEST_DIR}/codecs/csv1.txt'

    print(f"""
        [>>] Running CSV test against {TEST_BINARY.split('/')[-1]} with {TEST_SAMPLE.split('/')[-1]}
    """)

    harness = Harness.Harness(TEST_BINARY)

    csv_worker = CSV.CSV(TEST_SAMPLE)
    
    # buf = ''
    # csv_writer = csv.writer(buf)
    for x in range(5):
        for x in csv_worker.run():
            
            # @ here would mark the place the 
            # aggregator feeds harness
            # print(x)
            print(f"\nPiping to harness, res was {harness.open_pipe(x)}\n")
    

# test json1
def test_json():
    TEST_DIR = './tests/complete'
    TEST_BINARY = f'{TEST_DIR}/json1'
    TEST_SAMPLE = f'{TEST_DIR}/codecs/json1.txt'

    print(f"""
        [>>] Running JSON test against {TEST_BINARY.split('/')[-1]} with {TEST_SAMPLE.split('/')[-1]}
    """)

    harness = Harness.Harness(TEST_BINARY)
    json_worker = JSON.JSON(TEST_SAMPLE)

    for x in range(10):
        for x in json_worker.run():
            # @ here would mark the place the 
            # aggregator feeds harness
            print(f'[DEBUG] test mutation was {x}')
            print(f"\nPiping to harness, res was {harness.open_pipe(x)}\n")

# test plaintext
def test_plaintext():
    TEST_DIR = './tests/complete'
    TEST_BINARY = f'{TEST_DIR}/plaintext2'
    TEST_SAMPLE = f'{TEST_DIR}/codecs/plaintext2.txt'

    print(f"""
        [>>] Running TXT test against {TEST_BINARY.split('/')[-1]} with {TEST_SAMPLE.split('/')[-1]}
    """)

    harness = Harness.Harness(TEST_BINARY)
    txt_worker = TXT.TXT(TEST_SAMPLE)
    breakingInputs = []
    for i in range(7000):
        print(f'case {i}')
        for u in txt_worker.run():
            try:
                #print(f'[DEBUG] test mutation was {u}')
                retCode = harness.open_pipe(u)
                #print(f"\nPiping to harness, res was {retCode}\n")
                if retCode != 0:
                    print('BROKE IT!!!!')
                    print(u)
                    return
            except:
                print('Either the generators are empty, or I fucked up')
                break
    #print(f'Caused {len(breakingInputs)} crashes')

def test_negate():

    from fuzzybear.strategies import Strategy

    tests = [
        '5',
        5,
        '-5',
        -5,
        '5.0',
        5.0,
        '-5.0',
        -5.0,
        0
    ]

    print(f"""
        [>>] Running negate tests
    """)

    strategy_driver = Strategy.Strategy()
    for test in tests:
        for s in strategy_driver.negate(test):
            print(f'Flipped {test} :: {s}')




###########################################################################

print_banner()

parser = argparse.ArgumentParser()


'''
parser.add_argument('-P', '--your-test',
                    dest = 'test-name',
                    action='store_true',
                    help = 'what is your test'
                    )
'''

parser.add_argument('-H', '--harness',
                    dest = 'harness',
                    action='store_true',
                    help = 'test harness'
                    )


parser.add_argument('-CSV', '--CSV-codec',
                    dest = 'CSV',
                    action='store_true',
                    help = 'test the csv codec binaries'
                    )



parser.add_argument('-JSON', '--JSON-codec',
                    dest = 'JSON',
                    action='store_true',
                    help = 'test the json codec binaries'
                    )


parser.add_argument('-NEGATE', '--negate-test',
                    dest = 'NEGATE',
                    action='store_true',
                    help = 'test the negation strategy'
                    )

parser.add_argument('-TXT', '--TXT-test',
                    dest = 'TXT',
                    action='store_true',
                    help = 'Test TXT generator'
                    )


## Add command line args for your test ^

args = parser.parse_args()

if (len(sys.argv) == 1): parser.print_help()

'''
:::::::::::: Call Tests ::::::::::::

 ► if (args.test): test_name()
'''

if (args.harness): test_harness()

if (args.CSV): test_csv()

if (args.JSON): test_json()

if (args.TXT): test_plaintext()

if (args.NEGATE): test_negate()
